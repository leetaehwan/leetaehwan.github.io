<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>데이터 기반 쉐어링 Blog</title>
        <link>https://leetaehwan.github.io/blog</link>
        <description>데이터 기반 쉐어링 Blog</description>
        <lastBuildDate>Fri, 24 Mar 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ko</language>
        <item>
            <title><![CDATA[넘파이와 친해진 판다스 2.0]]></title>
            <link>https://leetaehwan.github.io/blog/pandas-2-feature-1</link>
            <guid>https://leetaehwan.github.io/blog/pandas-2-feature-1</guid>
            <pubDate>Fri, 24 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[다양한 자료형을 지원하는 인덱스]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="다양한-자료형을-지원하는-인덱스">다양한 자료형을 지원하는 인덱스<a href="#다양한-자료형을-지원하는-인덱스" class="hash-link" aria-label="다양한 자료형을 지원하는 인덱스에 대한 직접 링크" title="다양한 자료형을 지원하는 인덱스에 대한 직접 링크">​</a></h2><ul><li>인덱스가 dtype 속성에서 더많은 넘파이 숫자 자료형으로 지정할 수 있다. (e.g. np.int8, np.unit32, float32)<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">- 기존에는 np.int64, np.uint64와 np.float64만이 지정가능했다.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><img loading="lazy" src="/assets/images/pandas1.5-numeric-dtype-bd052c9f68173391488182f388d59316.png" width="854" height="700" class="img_ev3q"></li><li>기존에는 인덱스의 자료형이 int, uint, flaot으로만 지정되고,</li><li>64비트로만 지정이 가능으며 Int64Index 등으로 표현되었다.</li><li>판다스2.0 부터는 다양한 비트의 숫자 자료형을 인덱스를 지원하게 되었다.</li><li>그리고 인덱스의 이름도 Index로 통일되었다.</li></ul><p><img loading="lazy" src="/assets/images/pandas2.0-numeric-dtype-83aaa8589187dee1aaa35fa7a95a01c1.png" width="784" height="304" class="img_ev3q"></p><ul><li>인덱스가 더 넘파이 숫자 자료형을 가질 수 있어, 판다스 기능에 변화가 생겼다.</li><li>특히 64비트로 생성하도록 강제되었던 작업들이 이제는 작은 비트 사이즈를 갖는 인덱스를 생성하게 되었다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="넘파이-숫자-자료형으로-달라진-작업">넘파이 숫자 자료형으로 달라진 작업<a href="#넘파이-숫자-자료형으로-달라진-작업" class="hash-link" aria-label="넘파이 숫자 자료형으로 달라진 작업에 대한 직접 링크" title="넘파이 숫자 자료형으로 달라진 작업에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="넘파이-배열">넘파이 배열<a href="#넘파이-배열" class="hash-link" aria-label="넘파이 배열에 대한 직접 링크" title="넘파이 배열에 대한 직접 링크">​</a></h3><ul><li>넘파이 숫자형 배열을 인스턴스화 시킬 때 넘파이 배열의 자료형을 따르게 된다.</li><li>이전에는, 모든 인덱스들이 64비트로 강제된 넘파이 숫자 배열로 생성되었다.
<img loading="lazy" src="/assets/images/pandas1.5-arry-numeric-dtype-52bbb6769e302a11a54dd5b7b3b8ed10.png" width="916" height="332" class="img_ev3q"></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="숫자-날짜-속성의-datetimeindex">숫자 날짜 속성의 DatetimeIndex<a href="#숫자-날짜-속성의-datetimeindex" class="hash-link" aria-label="숫자 날짜 속성의 DatetimeIndex에 대한 직접 링크" title="숫자 날짜 속성의 DatetimeIndex에 대한 직접 링크">​</a></h3><ul><li>판다스 2.0 이전에는 DatetimeIndex(day, month, year)의 자료형이 int64이다.</li><li>반면에 arrays.DatetimeArray에서는 32비트이다. </li><li>2.0 이후 버전에서는 DatetimeIndex가 int32 자료형으로 변경되면서 통일되었다.
<img loading="lazy" src="/assets/images/pandas2.0-datetime-dtype-ceeedcd227980d906b1e5838b13a2dff.png" width="1094" height="276" class="img_ev3q"></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="seriessparsefrom_coo가-int32를-지원한다">Series.sparse.from_coo()가 int32를 지원한다.<a href="#seriessparsefrom_coo가-int32를-지원한다" class="hash-link" aria-label="Series.sparse.from_coo()가 int32를 지원한다.에 대한 직접 링크" title="Series.sparse.from_coo()가 int32를 지원한다.에 대한 직접 링크">​</a></h3><ul><li>Series.sparse.from_coo()의 인덱스의 레벨 자료형이 int32 자료형이 되었다.</li><li>2.0버전 이전에는 행과 열 모두 int64 자료형을 가졌다.
<img loading="lazy" src="/assets/images/1.5-sparse-matrix-dtype-4b69eeca705851bc61583c85ee1ff03c.png" width="1030" height="640" class="img_ev3q"></li><li>2.0 버전부터는 행과 열의 자료형이 int32로 바꼈다.
<img loading="lazy" src="/assets/images/2.0-sparse-matrix-dtype-cb85cb5604e5c1e320fceb6edb7a1dfb.png" width="1142" height="510" class="img_ev3q"></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="index가-float16-dtype으로-인스턴스화-시킬-수-없다">Index가 float16 dtype으로 인스턴스화 시킬 수 없다.<a href="#index가-float16-dtype으로-인스턴스화-시킬-수-없다" class="hash-link" aria-label="Index가 float16 dtype으로 인스턴스화 시킬 수 없다.에 대한 직접 링크" title="Index가 float16 dtype으로 인스턴스화 시킬 수 없다.에 대한 직접 링크">​</a></h3><ul><li><p>이전 버전에서는 Index를 float16의 자료형으로 인스턴스화 시키면 Float64Index로 생성되었다.</p></li><li><p>이제 float16으로 자료형을 설정한 Index 인스턴스는 NotImplementedError의 에러를 발생한다.
<img loading="lazy" src="/assets/images/NotImplementedError-3048befdd09154aa668bb1412fc89a27.png" width="1224" height="216" class="img_ev3q"></p></li><li><p>다음 변경점들은 하나씩 포스팅 해보겠다. 그럼 이만</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="refference">refference<a href="#refference" class="hash-link" aria-label="refference에 대한 직접 링크" title="refference에 대한 직접 링크">​</a></h2><p><a href="https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html" target="_blank" rel="noopener noreferrer">판다스 공식 페이지</a></p>]]></content:encoded>
            <category>eda</category>
            <category>pandas</category>
        </item>
        <item>
            <title><![CDATA[Docusaurus 깃허브 페이지 호스팅하기]]></title>
            <link>https://leetaehwan.github.io/blog/docusaurus-deploy</link>
            <guid>https://leetaehwan.github.io/blog/docusaurus-deploy</guid>
            <pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[- 깃허브 페이지에 Docusaurus 블로그 사이트를 서비스해보자.]]></description>
            <content:encoded><![CDATA[<ul><li>깃허브 페이지에 Docusaurus 블로그 사이트를 서비스해보자. </li></ul><h1>목적</h1><ul><li>GitHub 블로그를 만들어보자.</li><li>Docusaurus를 사용해보자.</li></ul><h1>작업순서</h1><p><img loading="lazy" src="/assets/images/docusaurus-deploy-6634d8ecdb74a7a650f058c7e302570c.png" width="1290" height="776" class="img_ev3q"></p><ol><li>깃허브 블로그 repo 생성</li><li>개발환경 구축</li><li>Docusaurus 설치</li><li>로컬에서 서비스</li><li>깃허브 페이지에 배포</li></ol><h1>깃허브 블로그 repo 생성</h1><p><img loading="lazy" src="/assets/images/git-hub-repo-generation-910ec19d8487f8c23963ffac2a0d977b.png" width="1578" height="1426" class="img_ev3q"></p><ul><li>Repo 이름은 github 아이디.github.io로 작성한다.</li><li>Public 상태로 설정된 걸 확인하고 생성한다.</li></ul><h1>개발환경 구축</h1><ul><li>Docusaurus 블로그를 구축하기 위해서는 Node.js, npm, yarn, git 등이 필요하다. 하나씩 따라해보자.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nodejs">Node.js<a href="#nodejs" class="hash-link" aria-label="Node.js에 대한 직접 링크" title="Node.js에 대한 직접 링크">​</a></h2><ul><li>터미널(CLI)을 켜고, Node.js의 버전을 확인하자.</li><li>macOS의 터미널에서는 node -v 명령어를 통해 확인할 수 있다.</li><li>Docusaurus v2.3.1(2023.3월 기준)에는 v16.14 이상의 Node.js가 설치되어야 한다.</li><li>nvm을 통해서 설치나 버전을 관리할 수 있다.</li><li>아래와 같은 명령어를 통해 최신버전으로 관리할 수 있다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm install -g npm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="npm">NPM<a href="#npm" class="hash-link" aria-label="NPM에 대한 직접 링크" title="NPM에 대한 직접 링크">​</a></h2><ul><li>위의 명령어로 npm이 설치되면 node.js와 npm이 설치가 된다.</li><li>npm -v 명령어를 통해 버전도 확인할 수 있다.</li><li>npm은 docusaurus를 로컬에서 테스트할 때 사용한다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="yarn">Yarn<a href="#yarn" class="hash-link" aria-label="Yarn에 대한 직접 링크" title="Yarn에 대한 직접 링크">​</a></h2><ul><li>Yarn을 통해서 우리는 빌드하고 배포한다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm install --global yarn</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>다음과 같이 yarn을 설치한다.</li><li>설치가 잘 됐는지, 버전을 확인하기 위해서 아래 명령어를 입력해보자.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yarn --version</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>Git</h1><ul><li>앞서 생성한 repo를 로컬에 클론을 떠와서 작업한다.
<img loading="lazy" src="/assets/images/github-ssh-code-10bbbcab637c1556fb892c1dd72a8b71.png" width="1630" height="1156" class="img_ev3q"></li><li>위의 화면같이 코드의 SSH코드를 복사하자.</li><li>CLI를 통하여 클론 폴더를 가질 로컬 폴더에 가서 아래의 명령어를 통해 클론을 진행한다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone {SSH 코드}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><p>중괄호 없이 SSH 코드를 입력한다.</p></li><li><p>그러면 로컬에 000.github.io repo 클론이 저장되었고, repo에 연결된다.</p></li><li><p>이제 다음 단계로 넘어가자</p></li></ul><h1>Docusaurus 설치하기</h1><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npx create-docusaurus@latest my-website classic</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>터미널현재 경로에서 my-website 폴더가 설치된다.</li><li>해당 폴더 안의 폴더와 파일들을 모두 복사해 클론 repo인 000.github.io 폴더 안에 붙여넣는다.</li><li>아래와 같이 깃 허브에 add / commit / push를 해보자.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git add .</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m 'test'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git push</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="로컬에서-docusaurus-서비스-테스트">로컬에서 docusaurus 서비스 테스트<a href="#로컬에서-docusaurus-서비스-테스트" class="hash-link" aria-label="로컬에서 docusaurus 서비스 테스트에 대한 직접 링크" title="로컬에서 docusaurus 서비스 테스트에 대한 직접 링크">​</a></h2><ul><li>다시 CLI에서 000.github.io 폴더에 접근하여 아래 명령어를 입력한다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yarn run start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>그러면 http://localhost:3000 로컬 url을 통해서 접속할 수 있다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="깃허브-페이지에-호스팅하기">깃허브 페이지에 호스팅하기<a href="#깃허브-페이지에-호스팅하기" class="hash-link" aria-label="깃허브 페이지에 호스팅하기에 대한 직접 링크" title="깃허브 페이지에 호스팅하기에 대한 직접 링크">​</a></h2><ul><li>docusaurus를 호스팅하는 다양한 방법이 있지만, 여기서는 깃허브페이지에 호스팅한다.</li><li>먼저 빌드를 해야된다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yarn build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>이렇게 하면 build 폴더안에 콘텐츠들이 만들어진다. 이제 호스팅에 배포해보자.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">GIT_USER={깃허브 유저명} USE_SSH=true yarn deploy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><p>이렇게 하면 gh-pages라는 브랜치가 생성된다.</p></li><li><p>여기 까지 했다면 깃허브 repo의 page 설정을 다시 확인해보자.
<img loading="lazy" src="/assets/images/Github-pages-setting-7f0e18b4d7a666e85f581e2c43d8024a.png" width="2258" height="1096" class="img_ev3q"></p></li><li><p>그림과 같이 페이지 설정에 들어가서, gh-pages라는 브랜치로 저장한다.</p></li><li><p>이제 000.github.io에 접속해보자.</p></li><li><p>이제 내용을 꾸며보자.</p></li></ul><h1>refference</h1><ul><li><a href="https://docusaurus.io/docs/installation" target="_blank" rel="noopener noreferrer">docusaurus installation</a></li><li><a href="https://github.com/dochavez/Documenting-with-Docusaurus-V2.-" target="_blank" rel="noopener noreferrer">docusaurus documentation</a></li></ul>]]></content:encoded>
            <category>web</category>
            <category>blog</category>
            <category>writing</category>
        </item>
        <item>
            <title><![CDATA[스프링 부트 구성요소 살펴보기]]></title>
            <link>https://leetaehwan.github.io/blog/spring-boot-component-research</link>
            <guid>https://leetaehwan.github.io/blog/spring-boot-component-research</guid>
            <pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[- 백엔드를 배워본 적이 없는 학생이 김영한 스프링 부트 입문 강의를 듣고 작성한 글이다.]]></description>
            <content:encoded><![CDATA[<ul><li>백엔드를 배워본 적이 없는 학생이 김영한 스프링 부트 입문 강의를 듣고 작성한 글이다.</li><li>스프링 부트를 통해서 손쉽게 스프링 프레임워크를 활용한 웹 어플리케이션 서버를 만든다.</li><li>클라이언트 사이드인 웹 브라우저가 보내는 요청을 내장 톰캣 서버를 통해 스프링 컨테이너에서 처리하여 반환 시킨다.</li></ul><h1>스프링 부트 구성요소 톺아보기</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="내장-톰캣-서버">내장 톰캣 서버<a href="#내장-톰캣-서버" class="hash-link" aria-label="내장 톰캣 서버에 대한 직접 링크" title="내장 톰캣 서버에 대한 직접 링크">​</a></h2><ul><li>아파치 소프트웨어 재단에서 만든 WAS, 웹 어플리케이션이다.</li><li>자바 서블릿과 JSP, JavaServer Pages를 실행할 수 있는 환경을 제공한다.</li><li>Jakarta Servlet, Jakata Server Pages, Jakarta Expression Language 등의 사양을 구현한 오픈소스 소프트웨어이다.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="아파치와-톰캣의-차이점">아파치와 톰캣의 차이점<a href="#아파치와-톰캣의-차이점" class="hash-link" aria-label="아파치와 톰캣의 차이점에 대한 직접 링크" title="아파치와 톰캣의 차이점에 대한 직접 링크">​</a></h3><ul><li>아파치 소프트웨어 재단의 아파치 웹 서버이다.</li><li>정적 데이터인 HTML, CSS, 이미지 등을 처리하는데 빠르지만</li><li>톰캣은 WAS로서 JSP, 서블릿 처리, DB 연결 및 데이터 조작 등의 동적인 데이터를 처리하는데 적합하다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="정적--동적-데이터">정적 / 동적 데이터<a href="#정적--동적-데이터" class="hash-link" aria-label="정적 / 동적 데이터에 대한 직접 링크" title="정적 / 동적 데이터에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="정적-데이터">정적 데이터<a href="#정적-데이터" class="hash-link" aria-label="정적 데이터에 대한 직접 링크" title="정적 데이터에 대한 직접 링크">​</a></h3><ul><li>사용자의 요청에 따라 변하지 않는 데이터이다.</li><li>HTML, CSS, 이미지 파일과 같은 데이터를 말하며, 정적인 데이터는 웹 서버를 통해서 처리된다.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="동적-데이터">동적 데이터<a href="#동적-데이터" class="hash-link" aria-label="동적 데이터에 대한 직접 링크" title="동적 데이터에 대한 직접 링크">​</a></h3><ul><li>사용자의 요청에 따라 변하는 데이터를 의미한다.</li><li>사용자가 입력한 정보를 바탕으로 DB에서 정보를 검색하거나 조작하여 반환되는 데이터들을 말한다.</li><li>이러한 동적 데이터는 WAS에서 처리된다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="웹-서버와-웹-어플리케이션-서버-was와의-차이점">웹 서버와 웹 어플리케이션 서버, WAS와의 차이점<a href="#웹-서버와-웹-어플리케이션-서버-was와의-차이점" class="hash-link" aria-label="웹 서버와 웹 어플리케이션 서버, WAS와의 차이점에 대한 직접 링크" title="웹 서버와 웹 어플리케이션 서버, WAS와의 차이점에 대한 직접 링크">​</a></h2><h1>스프링 컨테이너와 빈</h1><ul><li>스프링에서, 어플리케이션의 중추를 구성하는 객체와 스프링 Ioc 컨테이너에서 관리되는 객체들을 빈이라고 한다.</li><li>빈은 간단히 구체화된 객체로 스프링 IoC 컨테이너에 의해 조립되거나 관리되어진다.</li><li>이런 빈과 그것들 간의 의존관계가 컨테이너에서 사용하는 Configuration 메타데이터에 반영된다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="컨테이너">컨테이너<a href="#컨테이너" class="hash-link" aria-label="컨테이너에 대한 직접 링크" title="컨테이너에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="beanfactory">BeanFactory<a href="#beanfactory" class="hash-link" aria-label="BeanFactory에 대한 직접 링크" title="BeanFactory에 대한 직접 링크">​</a></h3><ul><li>org.springframework.beans.factory.BeanFactory는 스프링 IoC 컨테이너의 실체의 대표이다.</li><li>스프링 IoC 컨테이너는 앞서 언급했던 빈들을 담거나 관리하는 책임이 있다.</li><li>BeanFractory 인터페이스는 스프링의 중심 IoC 컨테이너 인터페이스이다. </li><li>스프링으로 바로 제공되어지는 BeanFactory 인터페이스의다양한 구현들이 있다.</li><li>가장 많이 쓰이는 구현이 XmlBeanFactory 클래스이다.</li><li>이 구현은 우리가 앱을 구성하는 객체들과 의심할 여지없이 많은 객채들 간의 상호 의존관계를 XML의 언어로 표현하도록 한다.</li><li>XmlBeanFactory는 XML Configuration 메타데이터를 취해서 완전하게 환경설정된 시스템이나 앱을 만드는데 사용한다.</li></ul><p><img loading="lazy" src="https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/images/container-magic.png" class="img_ev3q">
<a href="https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s02.html" target="_blank" rel="noopener noreferrer">4.2 Basics - containers and beans</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="applicationcontext">ApplicationContext<a href="#applicationcontext" class="hash-link" aria-label="ApplicationContext에 대한 직접 링크" title="ApplicationContext에 대한 직접 링크">​</a></h3><ul><li>ApplicationContext 인터페이스도 스프링 IoC 컨테이너를 대표하고 구현, 환경설정, 빈을 조합하는 역할을 수행한다.</li><li>BeanFactory의 대체 인터페이스로 더 많은 기업에 특화된 기능들을 제공한다.</li><li>제공되는 기능으로 메시지 확인(다국언어 지원), 이벤트 게시, 어플리케이션 레이어 특화 문맥이 있다.</li><li>어플리케이션 컴포넌트에 접근할 때 사용하는 ListableBeanFactory 메서드를 상속 받았고</li><li>일반적인 방법으로 파일 리스소를 읽는 기능을 ResourceLoader로부터 상속 받았다.</li><li>ApplicationEventPublisher로부터 상속받은 등록된 리스너들의 이벤트를 게시하는 능력도 가지고 있다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="컨트롤러란-무엇인가">컨트롤러란 무엇인가?<a href="#컨트롤러란-무엇인가" class="hash-link" aria-label="컨트롤러란 무엇인가?에 대한 직접 링크" title="컨트롤러란 무엇인가?에 대한 직접 링크">​</a></h2><ul><li>전형적인 MVC, Model-View-Controller 아키텍처에서 Controller의 개념을 들여다보자.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="컨트롤러의-역할">컨트롤러의 역할<a href="#컨트롤러의-역할" class="hash-link" aria-label="컨트롤러의 역할에 대한 직접 링크" title="컨트롤러의 역할에 대한 직접 링크">​</a></h3><ul><li>들어오는 응답을 가로챈다.</li><li>응답의 내용을 데이터 내부 체계로 변환시킨다.</li><li>추가의 처리를 위한 모델에 데이터를 보낸다.</li><li>모델로부터 처리된 데이터를 얻어와 렌더링을 위해 해당 데이터를 뷰로 전달한다.</li></ul><p><strong>스프링 MVC 다이어그램</strong>
<img loading="lazy" src="/assets/images/dispatching-servlet-2d1d65483391b0f750b5826bea51750c.png" width="1770" height="814" class="img_ev3q"></p><ul><li>여기서 발송 서블릿이 아키텍처에서 Front 컨트롤러의 역할을 수행한다.</li><li>위 MCV 다이어그램이 전형적인 MCV 컨트롤러 뿐만아니라 RESTful 컨트롤러에 해당된다. (약간만 다르다.)</li><li>전통적인 접근법으로 MVC 어플리케이션은 서비스 지향이 아니라서 뷰 리졸버를 통해 컨트롤러로부터 얻어낸 데이터를 기반으로 최종 뷰를 렌더링한다.</li><li>RESTful 어플리케이션은 서비스 지향으로 디자인되어서 원본 데이터(주로 JSON)을 반환한다.</li><li>이러한 어플리케이션이 어떠한 뷰 렌더링도 하지 않기 때문에, 뷰 리졸버가 존재하지 않는다.</li><li>그래서 컨트롤러가 일반적으로 직접 HTTP 응답을 통해 데이터를 전송할 것으로 기대한다.
<a href="https://www.baeldung.com/spring-controllers" target="_blank" rel="noopener noreferrer">출처</a></li></ul><h1>Maven Dependencies</h1><ul><li>Maven은 빌드 자동화 도구로 주로 자바 프로젝트에서 쓰인다.</li><li>스프링에서는 Maven이 의존성들을 구성하고 프로젝트를 빌드하는데 사용된다.</li><li>다음은 스프링 부트에서 스프링 MVC로 동작하기 위해서 Maven 의존성을 다뤄본다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;dependency&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;version&gt;3.0.2&lt;/version&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/dependency&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>스프링 부트 Web Config</h1><ul><li>스프링 부트에서 어떻게 구성하는지 들여다보자.</li><li>클래서 경로에 thymeleaf 의존성을 추가했기 때문에, 이를 위한 어떤 @Beans도 구성할 필요가 없습니다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;dependency&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/dependency&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>WebConfig에서 기본 설정 서블릿과 Greeting 객체와 오브젝트 매퍼를 위한 빈을 가능하도록 추가해준다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Bean</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt; enableDefaultServlet(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return factory -&gt; factory.setRegisterDefaultServlet(true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Bean</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public Greeting greeting() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Greeting greeting = new Greeting();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    greeting.setMessage("Hello World !!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return greeting;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Bean</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public ObjectMapper objectMapper() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">return new ObejctMapper();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>예를들어, 만약 컨트롤러가 "welcome" 이름의 뷰를 반환하면, 뷰 리졸버는 템플릿 폴더 안에 "welcome.html"이라 불리는 페이지를 처리한다.</li><li>템플릿 폴더가 thymeleaf가 뷰를 찾도록 기본 설정된 폴더이다.</li></ul><h1>MVC 컨트롤러</h1><ul><li>MVC 스타일의 컨트롤러를 구현하자</li><li>어떻게 ModelAndView 객체를 반환하는지 주목하자.</li><li>ModelAndView 객체는 모델 맵과 뷰 객체를 포함하고 둘다 뷰 리졸버에서 데이터 렌더링에 사용된다.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Controller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@RequestMapping(value= "/test")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class TestController {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @GetMapping</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public ModelAndView getTestData() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ModelAndView mv = new ModelAndView();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mv.setViewName("welcome");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mv.getModel().put("data", "Welcome Home man");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return mv;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><p>여기까지 정확하게 구축한게 여기있다.</p></li><li><p>먼저 TestController라고 불리는 컨테이너를 만들고 그것을 "/test" 경로에 매핑했다.</p></li><li><p>클래스에서, ModelAndView 객체를 반환하는 메서드를 만들고</p></li><li><p>GET 요청을 통해서 메서드를 패밍하여 "test"로 끝나는 URL 호출이 발송 서블릿으로 라우팅되어 TestContoller의 getTestData 메서드로 전달됩니다.</p></li><li><p>물론 ModelAndView 객체에 추가로 몇몇 모델 데이터도 반환한다.</p></li><li><p>뷰 객체는 "welcome"으로 설정되었고 위에서 언급한대로, 뷰 리졸버가 템플릿 폴더 안에 'welcome.html'으로 불리는 페이지를 찾는다.</p></li></ul><h1>REST 컨트롤러</h1><ul><li>스프링 RESTful 어플리케이션 구축은 MVC어플리케이션의 것과 뷰리졸버와 모델 맵이 없다는 것 빼고는 같다.</li><li>API가 간단히 JSON과 같은 방식의 원본 데이터로 클라이언트에게 반환한다.</li><li>그래서 발송 서블릿이 뷰 리졸버를 우회하여 HTTP 응답 바디의 데이터를 바로 반환한다.</li><li>간단한 RESTful controller의 구현을 보자.</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@RestContorller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Restcontroller {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @GetMapping(value = "/student/{studentId}")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Student getTestData(@PathVariable Integer studentId) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Student student = new Student();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        student.setName("Peter");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        student.setId(student.ID);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return student;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>data</category>
        </item>
        <item>
            <title><![CDATA[Greetings!]]></title>
            <link>https://leetaehwan.github.io/blog/greetings</link>
            <guid>https://leetaehwan.github.io/blog/greetings</guid>
            <pubDate>Sat, 18 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Congratulations, you have made your first post!]]></description>
            <content:encoded><![CDATA[<p>Congratulations, you have made your first post!</p><p>Feel free to play around and edit this post as much you like.</p>]]></content:encoded>
            <category>greetings</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://leetaehwan.github.io/blog/welcome</link>
            <guid>https://leetaehwan.github.io/blog/welcome</guid>
            <pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></description>
            <content:encoded><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p><p>The blog supports tags as well!</p><p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content:encoded>
            <category>facebook</category>
            <category>hello</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[MDX Blog Post]]></title>
            <link>https://leetaehwan.github.io/blog/mdx-blog-post</link>
            <guid>https://leetaehwan.github.io/blog/mdx-blog-post</guid>
            <pubDate>Sun, 01 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></description>
            <content:encoded><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a>.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>팁</div><div class="admonitionContent_S0QG"><p>Use the power of React to create interactive blog posts.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'button clicked!'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">button</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><button>Click me!</button></div></div>]]></content:encoded>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[Long Blog Post]]></title>
            <link>https://leetaehwan.github.io/blog/long-blog-post</link>
            <guid>https://leetaehwan.github.io/blog/long-blog-post</guid>
            <pubDate>Wed, 29 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the summary of a very long blog post,]]></description>
            <content:encoded><![CDATA[<p>This is the summary of a very long blog post,</p><p>Use a <code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code> comment to limit blog post size in the list view.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
            <category>hello</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[First Blog Post]]></title>
            <link>https://leetaehwan.github.io/blog/first-blog-post</link>
            <guid>https://leetaehwan.github.io/blog/first-blog-post</guid>
            <pubDate>Tue, 28 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet]]></description>
            <content:encoded><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
            <category>hola</category>
            <category>docusaurus</category>
        </item>
    </channel>
</rss>