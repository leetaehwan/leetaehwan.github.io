{
  "blogPosts": [
    {
      "id": "pandas-2-feature-1",
      "metadata": {
        "permalink": "/blog/pandas-2-feature-1",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-23-pandas2/2023-03-24-pandas2.md",
        "source": "@site/blog/2023-03-23-pandas2/2023-03-24-pandas2.md",
        "title": "넘파이와 친해진 판다스 2.0",
        "description": "다양한 자료형을 지원하는 인덱스",
        "date": "2023-03-24T00:00:00.000Z",
        "formattedDate": "2023년 3월 24일",
        "tags": [
          {
            "label": "eda",
            "permalink": "/blog/tags/eda"
          },
          {
            "label": "pandas",
            "permalink": "/blog/tags/pandas"
          }
        ],
        "readingTime": 2.83,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "이태환",
            "title": "개발자",
            "url": "https://github.com/leetaehwan",
            "image_url": "https://github.com/leetaehwan.png",
            "imageURL": "https://github.com/leetaehwan.png"
          }
        ],
        "frontMatter": {
          "slug": "pandas-2-feature-1",
          "title": "넘파이와 친해진 판다스 2.0",
          "authors": [
            {
              "name": "이태환",
              "title": "개발자",
              "url": "https://github.com/leetaehwan",
              "image_url": "https://github.com/leetaehwan.png",
              "imageURL": "https://github.com/leetaehwan.png"
            }
          ],
          "tags": [
            "eda",
            "pandas"
          ]
        },
        "nextItem": {
          "title": "Docusaurus 깃허브 페이지 호스팅하기",
          "permalink": "/blog/docusaurus-deploy"
        }
      },
      "content": "## 다양한 자료형을 지원하는 인덱스\n- 인덱스가 dtype 속성에서 더많은 넘파이 숫자 자료형으로 지정할 수 있다. (e.g. np.int8, np.unit32, float32)\n\t- 기존에는 np.int64, np.uint64와 np.float64만이 지정가능했다.\n![](./pandas1.5-numeric-dtype.png)\n- 기존에는 인덱스의 자료형이 int, uint, flaot으로만 지정되고,\n- 64비트로만 지정이 가능으며 Int64Index 등으로 표현되었다.\n- 판다스2.0 부터는 다양한 비트의 숫자 자료형을 인덱스를 지원하게 되었다.\n- 그리고 인덱스의 이름도 Index로 통일되었다.\n\n![[pandas2.0-numeric-dtype 1.png]]\n- 인덱스가 더 넘파이 숫자 자료형을 가질 수 있어, 판다스 기능에 변화가 생겼다.\n- 특히 64비트로 생성하도록 강제되었던 작업들이 이제는 작은 비트 사이즈를 갖는 인덱스를 생성하게 되었다.\n## 넘파이 숫자 자료형으로 달라진 작업\n### 넘파이 배열\n- 넘파이 숫자형 배열을 인스턴스화 시킬 때 넘파이 배열의 자료형을 따르게 된다.\n- 이전에는, 모든 인덱스들이 64비트로 강제된 넘파이 숫자 배열로 생성되었다.\n![](./pandas1.5-arry-numeric-dtype.png)\n### 숫자 날짜 속성의 DatetimeIndex \n- 판다스 2.0 이전에는 DatetimeIndex(day, month, year)의 자료형이 int64이다.\n- 반면에 arrays.DatetimeArray에서는 32비트이다. \n- 2.0 이후 버전에서는 DatetimeIndex가 int32 자료형으로 변경되면서 통일되었다.\n![](./pandas2.0-datetime-dtype.png)\n\n### Series.sparse.from_coo()가 int32를 지원한다.\n- Series.sparse.from_coo()의 인덱스의 레벨 자료형이 int32 자료형이 되었다.\n- 2.0버전 이전에는 행과 열 모두 int64 자료형을 가졌다.\n![](./1.5-sparse-matrix-dtype.png)\n- 2.0 버전부터는 행과 열의 자료형이 int32로 바꼈다.\n![](./2.0-sparse-matrix-dtype.png)\n\n### Index가 float16 dtype으로 인스턴스화 시킬 수 없다.\n- 이전 버전에서는 Index를 float16의 자료형으로 인스턴스화 시키면 Float64Index로 생성되었다.\n- 이제 float16으로 자료형을 설정한 Index 인스턴스는 NotImplementedError의 에러를 발생한다.\n![](./NotImplementedError.png)\n\n- 다음 변경점들은 하나씩 포스팅 해보겠다. 그럼 이만\n\n\n## refference\n[판다스 공식 페이지](https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html)"
    },
    {
      "id": "docusaurus-deploy",
      "metadata": {
        "permalink": "/blog/docusaurus-deploy",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-23-docusaurus-deploy/2023-03-23-docusaurus-deploy.md",
        "source": "@site/blog/2023-03-23-docusaurus-deploy/2023-03-23-docusaurus-deploy.md",
        "title": "Docusaurus 깃허브 페이지 호스팅하기",
        "description": "- 깃허브 페이지에 Docusaurus 블로그 사이트를 서비스해보자.",
        "date": "2023-03-23T00:00:00.000Z",
        "formattedDate": "2023년 3월 23일",
        "tags": [
          {
            "label": "web",
            "permalink": "/blog/tags/web"
          },
          {
            "label": "blog",
            "permalink": "/blog/tags/blog"
          },
          {
            "label": "writing",
            "permalink": "/blog/tags/writing"
          }
        ],
        "readingTime": 4.305,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "이태환",
            "title": "개발자",
            "url": "https://github.com/leetaehwan",
            "image_url": "https://github.com/leetaehwan.png",
            "imageURL": "https://github.com/leetaehwan.png"
          }
        ],
        "frontMatter": {
          "slug": "docusaurus-deploy",
          "title": "Docusaurus 깃허브 페이지 호스팅하기",
          "authors": [
            {
              "name": "이태환",
              "title": "개발자",
              "url": "https://github.com/leetaehwan",
              "image_url": "https://github.com/leetaehwan.png",
              "imageURL": "https://github.com/leetaehwan.png"
            }
          ],
          "tags": [
            "web",
            "blog",
            "writing"
          ]
        },
        "prevItem": {
          "title": "넘파이와 친해진 판다스 2.0",
          "permalink": "/blog/pandas-2-feature-1"
        },
        "nextItem": {
          "title": "스프링 부트 구성요소 살펴보기",
          "permalink": "/blog/spring-boot-component-research"
        }
      },
      "content": "- 깃허브 페이지에 Docusaurus 블로그 사이트를 서비스해보자. \n\n# 목적\n- GitHub 블로그를 만들어보자.\n- Docusaurus를 사용해보자.\n\n# 작업순서\n![](./docusaurus-deploy.png)\n1. 깃허브 블로그 repo 생성\n2. 개발환경 구축\n3. Docusaurus 설치\n4. 로컬에서 서비스\n5. 깃허브 페이지에 배포\n\n# 깃허브 블로그 repo 생성\n![](./git-hub-repo-generation.png)\n- Repo 이름은 github 아이디.github.io로 작성한다.\n- Public 상태로 설정된 걸 확인하고 생성한다.\n\n# 개발환경 구축\n- Docusaurus 블로그를 구축하기 위해서는 Node.js, npm, yarn, git 등이 필요하다. 하나씩 따라해보자.\n\n## Node.js\n- 터미널(CLI)을 켜고, Node.js의 버전을 확인하자.\n- macOS의 터미널에서는 node -v 명령어를 통해 확인할 수 있다.\n- Docusaurus v2.3.1(2023.3월 기준)에는 v16.14 이상의 Node.js가 설치되어야 한다.\n- nvm을 통해서 설치나 버전을 관리할 수 있다.\n- 아래와 같은 명령어를 통해 최신버전으로 관리할 수 있다.\n\n```\nnpm install -g npm\n```\n\n## NPM\n- 위의 명령어로 npm이 설치되면 node.js와 npm이 설치가 된다.\n- npm -v 명령어를 통해 버전도 확인할 수 있다.\n- npm은 docusaurus를 로컬에서 테스트할 때 사용한다.\n\n## Yarn\n- Yarn을 통해서 우리는 빌드하고 배포한다.\n```\nnpm install --global yarn\n```\n- 다음과 같이 yarn을 설치한다.\n- 설치가 잘 됐는지, 버전을 확인하기 위해서 아래 명령어를 입력해보자.\n```\nyarn --version\n```\n\n# Git\n- 앞서 생성한 repo를 로컬에 클론을 떠와서 작업한다.\n![](./github-ssh-code.png)\n- 위의 화면같이 코드의 SSH코드를 복사하자.\n- CLI를 통하여 클론 폴더를 가질 로컬 폴더에 가서 아래의 명령어를 통해 클론을 진행한다.\n```\ngit clone {SSH 코드}\n```\n- 중괄호 없이 SSH 코드를 입력한다.\n- 그러면 로컬에 000.github.io repo 클론이 저장되었고, repo에 연결된다.\n\n- 이제 다음 단계로 넘어가자\n\n# Docusaurus 설치하기\n```\nnpx create-docusaurus@latest my-website classic\n```\n- 터미널현재 경로에서 my-website 폴더가 설치된다.\n- 해당 폴더 안의 폴더와 파일들을 모두 복사해 클론 repo인 000.github.io 폴더 안에 붙여넣는다.\n- 아래와 같이 깃 허브에 add / commit / push를 해보자.\n```\ngit add .\n```\n```\ngit commit -m 'test'\n```\n```\ngit push\n```\n\n## 로컬에서 docusaurus 서비스 테스트\n- 다시 CLI에서 000.github.io 폴더에 접근하여 아래 명령어를 입력한다.\n```\nyarn run start\n```\n- 그러면 http://localhost:3000 로컬 url을 통해서 접속할 수 있다.\n\n## 깃허브 페이지에 호스팅하기\n- docusaurus를 호스팅하는 다양한 방법이 있지만, 여기서는 깃허브페이지에 호스팅한다.\n- 먼저 빌드를 해야된다.\n```\nyarn build\n```\n- 이렇게 하면 build 폴더안에 콘텐츠들이 만들어진다. 이제 호스팅에 배포해보자.\n```\nGIT_USER={깃허브 유저명} USE_SSH=true yarn deploy\n```\n- 이렇게 하면 gh-pages라는 브랜치가 생성된다.\n- 여기 까지 했다면 깃허브 repo의 page 설정을 다시 확인해보자.\n![](./Github-pages-setting.png)\n- 그림과 같이 페이지 설정에 들어가서, gh-pages라는 브랜치로 저장한다.\n\n- 이제 000.github.io에 접속해보자.\n- 이제 내용을 꾸며보자.\n\n# refference\n- [docusaurus installation](https://docusaurus.io/docs/installation)\n- [docusaurus documentation](https://github.com/dochavez/Documenting-with-Docusaurus-V2.-)"
    },
    {
      "id": "spring-boot-component-research",
      "metadata": {
        "permalink": "/blog/spring-boot-component-research",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-23-spring-boot/2023-03-23-spring-boot.md",
        "source": "@site/blog/2023-03-23-spring-boot/2023-03-23-spring-boot.md",
        "title": "스프링 부트 구성요소 살펴보기",
        "description": "- 백엔드를 배워본 적이 없는 학생이 김영한 스프링 부트 입문 강의를 듣고 작성한 글이다.",
        "date": "2023-03-23T00:00:00.000Z",
        "formattedDate": "2023년 3월 23일",
        "tags": [
          {
            "label": "data",
            "permalink": "/blog/tags/data"
          }
        ],
        "readingTime": 10.525,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "이태환",
            "title": "개발자",
            "url": "https://github.com/leetaehwan",
            "image_url": "https://github.com/leetaehwan.png",
            "imageURL": "https://github.com/leetaehwan.png"
          }
        ],
        "frontMatter": {
          "slug": "spring-boot-component-research",
          "title": "스프링 부트 구성요소 살펴보기",
          "authors": [
            {
              "name": "이태환",
              "title": "개발자",
              "url": "https://github.com/leetaehwan",
              "image_url": "https://github.com/leetaehwan.png",
              "imageURL": "https://github.com/leetaehwan.png"
            }
          ],
          "tags": [
            "data"
          ]
        },
        "prevItem": {
          "title": "Docusaurus 깃허브 페이지 호스팅하기",
          "permalink": "/blog/docusaurus-deploy"
        },
        "nextItem": {
          "title": "Greetings!",
          "permalink": "/blog/greetings"
        }
      },
      "content": "- 백엔드를 배워본 적이 없는 학생이 김영한 스프링 부트 입문 강의를 듣고 작성한 글이다.\n- 스프링 부트를 통해서 손쉽게 스프링 프레임워크를 활용한 웹 어플리케이션 서버를 만든다.\n- 클라이언트 사이드인 웹 브라우저가 보내는 요청을 내장 톰캣 서버를 통해 스프링 컨테이너에서 처리하여 반환 시킨다.\n\n# 스프링 부트 구성요소 톺아보기\n\n## 내장 톰캣 서버\n- 아파치 소프트웨어 재단에서 만든 WAS, 웹 어플리케이션이다.\n- 자바 서블릿과 JSP, JavaServer Pages를 실행할 수 있는 환경을 제공한다.\n- Jakarta Servlet, Jakata Server Pages, Jakarta Expression Language 등의 사양을 구현한 오픈소스 소프트웨어이다.\n\n### 아파치와 톰캣의 차이점\n- 아파치 소프트웨어 재단의 아파치 웹 서버이다.\n- 정적 데이터인 HTML, CSS, 이미지 등을 처리하는데 빠르지만\n- 톰캣은 WAS로서 JSP, 서블릿 처리, DB 연결 및 데이터 조작 등의 동적인 데이터를 처리하는데 적합하다.\n\n## 정적 / 동적 데이터\n\n### 정적 데이터\n- 사용자의 요청에 따라 변하지 않는 데이터이다.\n- HTML, CSS, 이미지 파일과 같은 데이터를 말하며, 정적인 데이터는 웹 서버를 통해서 처리된다.\n\n### 동적 데이터\n- 사용자의 요청에 따라 변하는 데이터를 의미한다.\n- 사용자가 입력한 정보를 바탕으로 DB에서 정보를 검색하거나 조작하여 반환되는 데이터들을 말한다.\n- 이러한 동적 데이터는 WAS에서 처리된다.\n\n## 웹 서버와 웹 어플리케이션 서버, WAS와의 차이점\n\n# 스프링 컨테이너와 빈\n- 스프링에서, 어플리케이션의 중추를 구성하는 객체와 스프링 Ioc 컨테이너에서 관리되는 객체들을 빈이라고 한다.\n- 빈은 간단히 구체화된 객체로 스프링 IoC 컨테이너에 의해 조립되거나 관리되어진다.\n- 이런 빈과 그것들 간의 의존관계가 컨테이너에서 사용하는 Configuration 메타데이터에 반영된다.\n\n## 컨테이너\n\n### BeanFactory\n- org.springframework.beans.factory.BeanFactory는 스프링 IoC 컨테이너의 실체의 대표이다.\n- 스프링 IoC 컨테이너는 앞서 언급했던 빈들을 담거나 관리하는 책임이 있다.\n- BeanFractory 인터페이스는 스프링의 중심 IoC 컨테이너 인터페이스이다. \n- 스프링으로 바로 제공되어지는 BeanFactory 인터페이스의다양한 구현들이 있다.\n- 가장 많이 쓰이는 구현이 XmlBeanFactory 클래스이다.\n- 이 구현은 우리가 앱을 구성하는 객체들과 의심할 여지없이 많은 객채들 간의 상호 의존관계를 XML의 언어로 표현하도록 한다.\n- XmlBeanFactory는 XML Configuration 메타데이터를 취해서 완전하게 환경설정된 시스템이나 앱을 만드는데 사용한다.\n\n![](https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/images/container-magic.png)\n[4.2 Basics - containers and beans](https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s02.html)\n\n### ApplicationContext\n- ApplicationContext 인터페이스도 스프링 IoC 컨테이너를 대표하고 구현, 환경설정, 빈을 조합하는 역할을 수행한다.\n- BeanFactory의 대체 인터페이스로 더 많은 기업에 특화된 기능들을 제공한다.\n- 제공되는 기능으로 메시지 확인(다국언어 지원), 이벤트 게시, 어플리케이션 레이어 특화 문맥이 있다.\n- 어플리케이션 컴포넌트에 접근할 때 사용하는 ListableBeanFactory 메서드를 상속 받았고\n- 일반적인 방법으로 파일 리스소를 읽는 기능을 ResourceLoader로부터 상속 받았다.\n- ApplicationEventPublisher로부터 상속받은 등록된 리스너들의 이벤트를 게시하는 능력도 가지고 있다.\n\n## 컨트롤러란 무엇인가?\n- 전형적인 MVC, Model-View-Controller 아키텍처에서 Controller의 개념을 들여다보자.\n\n### 컨트롤러의 역할\n- 들어오는 응답을 가로챈다.\n- 응답의 내용을 데이터 내부 체계로 변환시킨다.\n- 추가의 처리를 위한 모델에 데이터를 보낸다.\n- 모델로부터 처리된 데이터를 얻어와 렌더링을 위해 해당 데이터를 뷰로 전달한다.\n\n**스프링 MVC 다이어그램**\n![](./dispatching-servlet.png)\n\n- 여기서 발송 서블릿이 아키텍처에서 Front 컨트롤러의 역할을 수행한다.\n- 위 MCV 다이어그램이 전형적인 MCV 컨트롤러 뿐만아니라 RESTful 컨트롤러에 해당된다. (약간만 다르다.)\n- 전통적인 접근법으로 MVC 어플리케이션은 서비스 지향이 아니라서 뷰 리졸버를 통해 컨트롤러로부터 얻어낸 데이터를 기반으로 최종 뷰를 렌더링한다.\n- RESTful 어플리케이션은 서비스 지향으로 디자인되어서 원본 데이터(주로 JSON)을 반환한다.\n- 이러한 어플리케이션이 어떠한 뷰 렌더링도 하지 않기 때문에, 뷰 리졸버가 존재하지 않는다.\n- 그래서 컨트롤러가 일반적으로 직접 HTTP 응답을 통해 데이터를 전송할 것으로 기대한다.\n[출처](https://www.baeldung.com/spring-controllers)\n\n# Maven Dependencies\n- Maven은 빌드 자동화 도구로 주로 자바 프로젝트에서 쓰인다.\n- 스프링에서는 Maven이 의존성들을 구성하고 프로젝트를 빌드하는데 사용된다.\n- 다음은 스프링 부트에서 스프링 MVC로 동작하기 위해서 Maven 의존성을 다뤄본다.\n```\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <version>3.0.2</version>\n</dependency>\n```\n\n# 스프링 부트 Web Config\n- 스프링 부트에서 어떻게 구성하는지 들여다보자.\n- 클래서 경로에 thymeleaf 의존성을 추가했기 때문에, 이를 위한 어떤 @Beans도 구성할 필요가 없습니다.\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n- WebConfig에서 기본 설정 서블릿과 Greeting 객체와 오브젝트 매퍼를 위한 빈을 가능하도록 추가해준다.\n```\n@Bean\npublic WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> enableDefaultServlet(){\n\treturn factory -> factory.setRegisterDefaultServlet(true);\n}\n\n@Bean\npublic Greeting greeting() {\n\tGreeting greeting = new Greeting();\n\tgreeting.setMessage(\"Hello World !!\");\n\treturn greeting;\n}\n\n@Bean\npublic ObjectMapper objectMapper() {\nreturn new ObejctMapper();\n}\n```\n- 예를들어, 만약 컨트롤러가 \"welcome\" 이름의 뷰를 반환하면, 뷰 리졸버는 템플릿 폴더 안에 \"welcome.html\"이라 불리는 페이지를 처리한다.\n- 템플릿 폴더가 thymeleaf가 뷰를 찾도록 기본 설정된 폴더이다.\n\n# MVC 컨트롤러\n- MVC 스타일의 컨트롤러를 구현하자\n- 어떻게 ModelAndView 객체를 반환하는지 주목하자.\n- ModelAndView 객체는 모델 맵과 뷰 객체를 포함하고 둘다 뷰 리졸버에서 데이터 렌더링에 사용된다.\n\n```\n@Controller\n@RequestMapping(value= \"/test\")\npublic class TestController {\n\t@GetMapping\n\tpublic ModelAndView getTestData() {\n\t\tModelAndView mv = new ModelAndView();\n\t\tmv.setViewName(\"welcome\");\n\t\tmv.getModel().put(\"data\", \"Welcome Home man\");\n\t\treturn mv;\n\t}\n}\n```\n- 여기까지 정확하게 구축한게 여기있다.\n- 먼저 TestController라고 불리는 컨테이너를 만들고 그것을 \"/test\" 경로에 매핑했다.\n- 클래스에서, ModelAndView 객체를 반환하는 메서드를 만들고\n- GET 요청을 통해서 메서드를 패밍하여 \"test\"로 끝나는 URL 호출이 발송 서블릿으로 라우팅되어 TestContoller의 getTestData 메서드로 전달됩니다.\n\n- 물론 ModelAndView 객체에 추가로 몇몇 모델 데이터도 반환한다.\n- 뷰 객체는 \"welcome\"으로 설정되었고 위에서 언급한대로, 뷰 리졸버가 템플릿 폴더 안에 'welcome.html'으로 불리는 페이지를 찾는다.\n\n# REST 컨트롤러\n- 스프링 RESTful 어플리케이션 구축은 MVC어플리케이션의 것과 뷰리졸버와 모델 맵이 없다는 것 빼고는 같다.\n- API가 간단히 JSON과 같은 방식의 원본 데이터로 클라이언트에게 반환한다.\n- 그래서 발송 서블릿이 뷰 리졸버를 우회하여 HTTP 응답 바디의 데이터를 바로 반환한다.\n- 간단한 RESTful controller의 구현을 보자.\n```\n@RestContorller\npublic class Restcontroller {\n\t@GetMapping(value = \"/student/{studentId}\")\n\tpublic Student getTestData(@PathVariable Integer studentId) {\n\t\tStudent student = new Student();\n\t\tstudent.setName(\"Peter\");\n\t\tstudent.setId(student.ID);\n\t\treturn student;\n\t}\n}\n```"
    },
    {
      "id": "greetings",
      "metadata": {
        "permalink": "/blog/greetings",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-18-greetings.md",
        "source": "@site/blog/2023-03-18-greetings.md",
        "title": "Greetings!",
        "description": "Congratulations, you have made your first post!",
        "date": "2023-03-18T00:00:00.000Z",
        "formattedDate": "2023년 3월 18일",
        "tags": [
          {
            "label": "greetings",
            "permalink": "/blog/tags/greetings"
          }
        ],
        "readingTime": 0.1,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "Joel Marcey",
            "title": "Co-creator of Docusaurus 1",
            "url": "https://github.com/JoelMarcey",
            "image_url": "https://github.com/JoelMarcey.png",
            "imageURL": "https://github.com/JoelMarcey.png"
          },
          {
            "name": "Sebastien Lorber",
            "title": "Docusaurus maintainer",
            "url": "https://sebastienlorber.com",
            "image_url": "https://github.com/slorber.png",
            "imageURL": "https://github.com/slorber.png"
          }
        ],
        "frontMatter": {
          "slug": "greetings",
          "title": "Greetings!",
          "authors": [
            {
              "name": "Joel Marcey",
              "title": "Co-creator of Docusaurus 1",
              "url": "https://github.com/JoelMarcey",
              "image_url": "https://github.com/JoelMarcey.png",
              "imageURL": "https://github.com/JoelMarcey.png"
            },
            {
              "name": "Sebastien Lorber",
              "title": "Docusaurus maintainer",
              "url": "https://sebastienlorber.com",
              "image_url": "https://github.com/slorber.png",
              "imageURL": "https://github.com/slorber.png"
            }
          ],
          "tags": [
            "greetings"
          ]
        },
        "prevItem": {
          "title": "스프링 부트 구성요소 살펴보기",
          "permalink": "/blog/spring-boot-component-research"
        },
        "nextItem": {
          "title": "Welcome",
          "permalink": "/blog/welcome"
        }
      },
      "content": "Congratulations, you have made your first post!\n\nFeel free to play around and edit this post as much you like."
    },
    {
      "id": "welcome",
      "metadata": {
        "permalink": "/blog/welcome",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md",
        "source": "@site/blog/2021-08-26-welcome/index.md",
        "title": "Welcome",
        "description": "Docusaurus blogging features are powered by the blog plugin.",
        "date": "2021-08-26T00:00:00.000Z",
        "formattedDate": "2021년 8월 26일",
        "tags": [
          {
            "label": "facebook",
            "permalink": "/blog/tags/facebook"
          },
          {
            "label": "hello",
            "permalink": "/blog/tags/hello"
          },
          {
            "label": "docusaurus",
            "permalink": "/blog/tags/docusaurus"
          }
        ],
        "readingTime": 0.405,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "Sébastien Lorber",
            "title": "Docusaurus maintainer",
            "url": "https://sebastienlorber.com",
            "imageURL": "https://github.com/slorber.png",
            "key": "slorber"
          },
          {
            "name": "Yangshun Tay",
            "title": "Front End Engineer @ Facebook",
            "url": "https://github.com/yangshun",
            "imageURL": "https://github.com/yangshun.png",
            "key": "yangshun"
          }
        ],
        "frontMatter": {
          "slug": "welcome",
          "title": "Welcome",
          "authors": [
            "slorber",
            "yangshun"
          ],
          "tags": [
            "facebook",
            "hello",
            "docusaurus"
          ]
        },
        "prevItem": {
          "title": "Greetings!",
          "permalink": "/blog/greetings"
        },
        "nextItem": {
          "title": "MDX Blog Post",
          "permalink": "/blog/mdx-blog-post"
        }
      },
      "content": "[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\n\nSimply add Markdown files (or folders) to the `blog` directory.\n\nRegular blog authors can be added to `authors.yml`.\n\nThe blog post date can be extracted from filenames, such as:\n\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n\nA blog post folder can be convenient to co-locate blog post images:\n\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\n\nThe blog supports tags as well!\n\n**And if you don't want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."
    },
    {
      "id": "mdx-blog-post",
      "metadata": {
        "permalink": "/blog/mdx-blog-post",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx",
        "source": "@site/blog/2021-08-01-mdx-blog-post.mdx",
        "title": "MDX Blog Post",
        "description": "Blog posts support Docusaurus Markdown features, such as MDX.",
        "date": "2021-08-01T00:00:00.000Z",
        "formattedDate": "2021년 8월 1일",
        "tags": [
          {
            "label": "docusaurus",
            "permalink": "/blog/tags/docusaurus"
          }
        ],
        "readingTime": 0.175,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "Sébastien Lorber",
            "title": "Docusaurus maintainer",
            "url": "https://sebastienlorber.com",
            "imageURL": "https://github.com/slorber.png",
            "key": "slorber"
          }
        ],
        "frontMatter": {
          "slug": "mdx-blog-post",
          "title": "MDX Blog Post",
          "authors": [
            "slorber"
          ],
          "tags": [
            "docusaurus"
          ]
        },
        "prevItem": {
          "title": "Welcome",
          "permalink": "/blog/welcome"
        },
        "nextItem": {
          "title": "Long Blog Post",
          "permalink": "/blog/long-blog-post"
        }
      },
      "content": "Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\n\n:::tip\n\nUse the power of React to create interactive blog posts.\n\n```js\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n\n:::"
    },
    {
      "id": "long-blog-post",
      "metadata": {
        "permalink": "/blog/long-blog-post",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md",
        "source": "@site/blog/2019-05-29-long-blog-post.md",
        "title": "Long Blog Post",
        "description": "This is the summary of a very long blog post,",
        "date": "2019-05-29T00:00:00.000Z",
        "formattedDate": "2019년 5월 29일",
        "tags": [
          {
            "label": "hello",
            "permalink": "/blog/tags/hello"
          },
          {
            "label": "docusaurus",
            "permalink": "/blog/tags/docusaurus"
          }
        ],
        "readingTime": 2.05,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Endilie Yacop Sucipto",
            "title": "Maintainer of Docusaurus",
            "url": "https://github.com/endiliey",
            "imageURL": "https://github.com/endiliey.png",
            "key": "endi"
          }
        ],
        "frontMatter": {
          "slug": "long-blog-post",
          "title": "Long Blog Post",
          "authors": "endi",
          "tags": [
            "hello",
            "docusaurus"
          ]
        },
        "prevItem": {
          "title": "MDX Blog Post",
          "permalink": "/blog/mdx-blog-post"
        },
        "nextItem": {
          "title": "First Blog Post",
          "permalink": "/blog/first-blog-post"
        }
      },
      "content": "This is the summary of a very long blog post,\n\nUse a `<!--` `truncate` `-->` comment to limit blog post size in the list view.\n\n<!--truncate-->\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"
    },
    {
      "id": "first-blog-post",
      "metadata": {
        "permalink": "/blog/first-blog-post",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-28-first-blog-post.md",
        "source": "@site/blog/2019-05-28-first-blog-post.md",
        "title": "First Blog Post",
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet",
        "date": "2019-05-28T00:00:00.000Z",
        "formattedDate": "2019년 5월 28일",
        "tags": [
          {
            "label": "hola",
            "permalink": "/blog/tags/hola"
          },
          {
            "label": "docusaurus",
            "permalink": "/blog/tags/docusaurus"
          }
        ],
        "readingTime": 0.12,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "Gao Wei",
            "title": "Docusaurus Core Team",
            "url": "https://github.com/wgao19",
            "image_url": "https://github.com/wgao19.png",
            "imageURL": "https://github.com/wgao19.png"
          }
        ],
        "frontMatter": {
          "slug": "first-blog-post",
          "title": "First Blog Post",
          "authors": {
            "name": "Gao Wei",
            "title": "Docusaurus Core Team",
            "url": "https://github.com/wgao19",
            "image_url": "https://github.com/wgao19.png",
            "imageURL": "https://github.com/wgao19.png"
          },
          "tags": [
            "hola",
            "docusaurus"
          ]
        },
        "prevItem": {
          "title": "Long Blog Post",
          "permalink": "/blog/long-blog-post"
        }
      },
      "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"
    }
  ]
}